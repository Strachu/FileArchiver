#region Copyright
/*
 * Copyright (C) 2015 Patryk Strach
 * 
 * This file is part of FileArchiver.
 * 
 * FileArchiver is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * 
 * FileArchiver is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License along with FileArchiver.
 * If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

using System;
using System.IO;
using System.Reflection;
using System.Xml.Serialization;

namespace FileArchiver.Presentation.Settings
{
	/// <summary>
	/// Class used to access and modify the settings of the application.
	/// </summary>
	/// <remarks>
	/// As opposed to the Settings class generated by visual studio designer, settings from this class can be shared between multiple assemblies.
	/// </remarks>
	[Serializable]
	public class ApplicationSettings
	{
		private static ApplicationSettings mInstance = null;

		private ApplicationSettings()
		{
			Language = "OSLang";
		}

		public string Language { get; set; }

		public WindowLayoutSettings WindowLayout { get; set; }

		public static ApplicationSettings Instance
		{
			get
			{
				if(mInstance == null)
					mInstance = Load();

				return mInstance;
			}
		}

		private static ApplicationSettings Load()
		{
			try
			{
				Directory.CreateDirectory(Path.GetDirectoryName(ConfigFilePath));

				using(var stream = File.OpenRead(ConfigFilePath))
				{
					var serializer = new XmlSerializer(typeof(ApplicationSettings));

					return (ApplicationSettings)serializer.Deserialize(stream);
				}
			}
			catch(FileNotFoundException)
			{
				return new ApplicationSettings();
			}
		}

		public void Save()
		{
			using(var stream = File.OpenWrite(ConfigFilePath))
			{
				var serializer = new XmlSerializer(GetType());

				serializer.Serialize(stream, this);
			}
		}

		private static string ConfigFilePath
		{
			get
			{
				var localAppData     = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
				var appNameAttribute = Assembly.GetExecutingAssembly().GetCustomAttribute(typeof(AssemblyProductAttribute)) as AssemblyProductAttribute;

				return Path.Combine(localAppData, appNameAttribute.Product, "config.xml");
			}
		}
	}
}
